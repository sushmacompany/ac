/* NOTE this file is autogenerated by Scalate : see http://scalate.fusesource.org/ */
package scalate.layouts

import _root_.scala.collection.JavaConversions._
import _root_.org.fusesource.scalate.support.TemplateConversions._
import _root_.org.fusesource.scalate.util.Measurements._
import org.fusesource.scalate.wikitext.PygmentizeHelpers._

object $_scalate_$default_jade {
  def $_scalate_$render($_scalate_$_context: _root_.org.fusesource.scalate.RenderContext): Unit = {
    import _root_.org.fusesource.scalate.support.RenderHelper.{sanitize=>$_scalate_$_sanitize, preserve=>$_scalate_$_preserve, indent=>$_scalate_$_indent, smart_sanitize=>$_scalate_$_smart_sanitize, attributes=>$_scalate_$_attributes}
    ;{
      implicit val context: _root_.org.fusesource.scalate.servlet.ServletRenderContext = $_scalate_$_context.attribute("context")
      import context._
      
      
      //
      //       Copyright (C) 2009-2011 the original author or authors.

      //       See the notice.md file distributed with this work for additional

      //       information regarding copyright ownership.

      //
      //       Licensed under the Apache License, Version 2.0 (the "License");

      //       you may not use this file except in compliance with the License.

      //       You may obtain a copy of the License at

      //
      //           http://www.apache.org/licenses/LICENSE-2.0

      //
      //       Unless required by applicable law or agreed to in writing, software

      //       distributed under the License is distributed on an "AS IS" BASIS,

      //       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

      //       See the License for the specific language governing permissions and

      //       limitations under the License.

      //
      ;{
        val body: String = $_scalate_$_context.attribute("body")
        ;{
          val title: String = $_scalate_$_context.attributeOrElse("title", "Scalate Sample")
                    response.setContentType("text/html")

          //           Only include the console if it's available and the engine is in dev mode.

                    val include_console = engine.isDevelopmentMode && engine.resourceLoader.exists("/org/fusesource/scalate/console/console_head.scaml")

          $_scalate_$_context << ( "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\" \"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd\"> \n<html lang=\"en\">\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <meta name=\"description\" content=\"description goes here\"/>\n    <meta name=\"keywords\" content=\"keywords,goes,here\"/>\n    <meta name=\"author\" content=\"Your Name\"/>\n" );
                    if (include_console)
{
            $_scalate_$_context << ( "    " );
            $_scalate_$_context << ( $_scalate_$_indent ( "    ", $_scalate_$_context.value(
               include("/org/fusesource/scalate/console/console_head.scaml")
            ) ) );
            $_scalate_$_context << ( "\n" );
          }
          $_scalate_$_context << ( "    <link" );
          $_scalate_$_context << $_scalate_$_attributes( $_scalate_$_context, List( (
              "href"
            ,
                            uri("/css/style.css")

            ), (
              "rel"
            ,
              "stylesheet"
            ), (
              "type"
            ,
              "text/css"
          ) ) )
          $_scalate_$_context << ( "/>\n" );
                    if (include_console)
{
            $_scalate_$_context << ( "    <link" );
            $_scalate_$_context << $_scalate_$_attributes( $_scalate_$_context, List( (
                "href"
              ,
                                uri("/css/scalate/console.css")

              ), (
                "rel"
              ,
                "stylesheet"
              ), (
                "type"
              ,
                "text/css"
            ) ) )
            $_scalate_$_context << ( "/>\n" );
          }
          $_scalate_$_context << ( "    <title>" );
          $_scalate_$_context << ( $_scalate_$_indent ( "    ", $_scalate_$_context.value(
             title
          ) ) );
          $_scalate_$_context << ( "</title>\n  </head>\n  <body>\n    <div id=\"navigation\">\n      <div class=\"wrapper\">\n        <ul>\n" );
                    if (requestUri.startsWith("/index."))
{
            $_scalate_$_context << ( "          <li>\n            <span>Home</span>\n          </li>\n" );
          }
                    else
{
            $_scalate_$_context << ( "          <li>\n            <a" );
            $_scalate_$_context << $_scalate_$_attributes( $_scalate_$_context, List( (
                "href"
              ,
                                uri("/")

            ) ) )
            $_scalate_$_context << ( ">Home</a>\n          </li>\n" );
          }
          $_scalate_$_context << ( "          <li>\n            <a href=\"http://scalate.fusesource.org/\">Documentation</a>\n          </li>\n        </ul>\n      </div>\n    </div>\n    <div id=\"content\">\n      <div class=\"wrapper\">\n" );
          $_scalate_$_context << ( $_scalate_$_context.valueUnescaped(
             body
          ) );
          $_scalate_$_context << ( "\n      </div>\n    </div>\n    <div id=\"footer\">\n      <div class=\"wrapper\">\n        <br/>\n" );
                    if (include_console)
{
            $_scalate_$_context << ( "        " );
            $_scalate_$_context << ( $_scalate_$_indent ( "        ", $_scalate_$_context.value(
               include("/org/fusesource/scalate/console/console.scaml")
            ) ) );
            $_scalate_$_context << ( "\n" );
          }
          $_scalate_$_context << ( "        <div></div>\n      </div>\n    </div>\n  </body>\n</html>\n" );
        }
      }
    }
  }
}


class $_scalate_$default_jade extends _root_.org.fusesource.scalate.Template {
  def render(context: _root_.org.fusesource.scalate.RenderContext): Unit = $_scalate_$default_jade.$_scalate_$render(context)
}
